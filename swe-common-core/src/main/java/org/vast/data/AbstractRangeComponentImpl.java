/***************************** BEGIN LICENSE BLOCK ***************************

 The contents of this file are subject to the Mozilla Public License Version
 1.1 (the "License"); you may not use this file except in compliance with
 the License. You may obtain a copy of the License at
 http://www.mozilla.org/MPL/MPL-1.1.html
 
 Software distributed under the License is distributed on an "AS IS" basis,
 WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 for the specific language governing rights and limitations under the License.
 
 The Original Code is the "SensorML DataProcessing Engine".
 
 The Initial Developer of the Original Code is the VAST team at the University of Alabama in Huntsville (UAH). <http://vast.uah.edu> Portions created by the Initial Developer are Copyright (C) 2007 the Initial Developer. All Rights Reserved. Please Contact Mike Botts <mike.botts@uah.edu> for more information.
 
 Contributor(s): 
    Alexandre Robin <robin@nsstc.uah.edu>
 
******************************* END LICENSE BLOCK ***************************/

package org.vast.data;

import net.opengis.swe.v20.AbstractSimpleComponent;
import org.vast.cdm.common.DataBlock;


/**
 * <p>
 * Base implementation for all range data components with min/max values
 * 11-2014: Updated to implement new API autogenerated from XML schema
 * </p>
 *
 * <p>Copyright (c) 2014</p>
 * @author Alexandre Robin
 * @version 1.0
 */
public abstract class AbstractRangeComponentImpl extends AbstractSimpleComponentImpl implements AbstractSimpleComponent
{
    private static final long serialVersionUID = -7411819306997320628L;
    
    protected DataValue min;
    protected DataValue max;
    
    
    protected AbstractRangeComponentImpl()
    {
        this.scalarCount = 2;
    }
    
    
    @Override
    public int getComponentCount()
    {
        return 2;
    }
    
    
    public DataValue getComponent(int index)
    {
        if (index == 0)
            return min;
        
        if (index == 1)
            return max;
        
        throw new IndexOutOfBoundsException("Ranges have only two components. Index can only be 0 or 1"); 
    }
   
    
    @Override
    protected void updateStartIndex(int startIndex)
    {
        dataBlock.startIndex = startIndex;
    }
        
    
    @Override
    public void setData(DataBlock dataBlock)
    {
        assert(dataBlock != null);        
        this.dataBlock = (AbstractDataBlock)dataBlock;

        // also assign dataBlock to children
        if (dataBlock instanceof DataBlockParallel)
        {
            min.setData(((DataBlockParallel)dataBlock).blockArray[0]);
            max.setData(((DataBlockParallel)dataBlock).blockArray[1]);
        }
        else if (dataBlock instanceof DataBlockMixed)
        {
            min.setData(((DataBlockParallel)dataBlock).blockArray[0]);
            max.setData(((DataBlockParallel)dataBlock).blockArray[1]);
        }
        else if (dataBlock instanceof DataBlockTuple)
        {
            AbstractDataBlock childBlock;
            
            childBlock = ((AbstractDataBlock)dataBlock).copy();
            childBlock.atomCount = 1;
            min.setData(childBlock);
            
            childBlock = ((AbstractDataBlock)dataBlock).copy();
            childBlock.atomCount = 1;
            childBlock.startIndex += 1;
            max.setData(childBlock);
        }
        else // case of big primitive array
        {
            AbstractDataBlock childBlock;
            
            childBlock = ((AbstractDataBlock)dataBlock).copy();
            childBlock.atomCount = 1;
            min.setData(childBlock);
            
            childBlock = ((AbstractDataBlock)dataBlock).copy();
            childBlock.atomCount = 1;
            childBlock.startIndex += 1;
            max.setData(childBlock);
        }
    }
    
    
    @Override
    public AbstractDataBlock createDataBlock()
    {
    	switch (dataType)
        {
        	case BOOLEAN:
        		return new DataBlockBoolean(2);
            
        	case BYTE:
        		return new DataBlockByte(2);
                
            case UBYTE:
                return new DataBlockUByte(2);
                
            case SHORT:
            	return new DataBlockShort(2);
                
            case USHORT:
                return new DataBlockUShort(2);
                
            case INT:
            	return new DataBlockInt(2);
                
            case UINT:
                return new DataBlockUInt(2);
                
            case LONG:
            case ULONG:
            	return new DataBlockLong(2);
                                
            case FLOAT:
            	return new DataBlockFloat(2);
                
            case DOUBLE:
            	return new DataBlockDouble(2);
                
            case UTF_STRING:
            case ASCII_STRING:
            	return new DataBlockString(2);
                
            default:
            	throw new RuntimeException("Data type not allowed for a range component: " + dataType);
        }
    }
}
